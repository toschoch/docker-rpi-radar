import numpy as np

fast_fft_window = np.array(
    [0.000060, 0.000069, 0.000095, 0.000138, 0.000201, 0.000283, 0.000386, 0.000511, 0.000662, 0.000839, 0.001046,
     0.001285, 0.001560, 0.001874, 0.002230, 0.002634,
     0.003089, 0.003600, 0.004172, 0.004811, 0.005521, 0.006309, 0.007180, 0.008141, 0.009199, 0.010361, 0.011633,
     0.013022, 0.014537, 0.016185, 0.017974, 0.019912,
     0.022007, 0.024267, 0.026702, 0.029319, 0.032127, 0.035136, 0.038353, 0.041787, 0.045448, 0.049343, 0.053482,
     0.057872, 0.062523, 0.067441, 0.072636, 0.078115,
     0.083885, 0.089953, 0.096327, 0.103011, 0.110014, 0.117340, 0.124993, 0.132979, 0.141302, 0.149965, 0.158971,
     0.168321, 0.178018, 0.188062, 0.198453, 0.209191,
     0.220273, 0.231697, 0.243461, 0.255559, 0.267988, 0.280741, 0.293812, 0.307192, 0.320874, 0.334847, 0.349102,
     0.363627, 0.378409, 0.393436, 0.408693, 0.424165,
     0.439837, 0.455692, 0.471712, 0.487879, 0.504173, 0.520575, 0.537064, 0.553619, 0.570218, 0.586838, 0.603456,
     0.620049, 0.636593, 0.653063, 0.669435, 0.685683,
     0.701782, 0.717708, 0.733434, 0.748935, 0.764185, 0.779160, 0.793834, 0.808181, 0.822177, 0.835799, 0.849021,
     0.861821, 0.874175, 0.886062, 0.897460, 0.908348,
     0.918706, 0.928515, 0.937756, 0.946413, 0.954469, 0.961909, 0.968718, 0.974885, 0.980396, 0.985242, 0.989413,
     0.992902, 0.995700, 0.997804, 0.999209, 0.999912,
     0.999912, 0.999209, 0.997804, 0.995700, 0.992902, 0.989413, 0.985242, 0.980396, 0.974885, 0.968718, 0.961909,
     0.954469, 0.946413, 0.937756, 0.928515, 0.918706,
     0.908348, 0.897460, 0.886062, 0.874175, 0.861821, 0.849021, 0.835799, 0.822177, 0.808181, 0.793834, 0.779160,
     0.764185, 0.748935, 0.733434, 0.717708, 0.701782,
     0.685683, 0.669435, 0.653063, 0.636593, 0.620049, 0.603456, 0.586838, 0.570218, 0.553619, 0.537064, 0.520575,
     0.504173, 0.487879, 0.471712, 0.455692, 0.439837,
     0.424165, 0.408693, 0.393436, 0.378409, 0.363627, 0.349102, 0.334847, 0.320874, 0.307192, 0.293812, 0.280741,
     0.267988, 0.255559, 0.243461, 0.231697, 0.220273,
     0.209191, 0.198453, 0.188062, 0.178018, 0.168321, 0.158971, 0.149965, 0.141302, 0.132979, 0.124993, 0.117340,
     0.110014, 0.103011, 0.096327, 0.089953, 0.083885,
     0.078115, 0.072636, 0.067441, 0.062523, 0.057872, 0.053482, 0.049343, 0.045448, 0.041787, 0.038353, 0.035136,
     0.032127, 0.029319, 0.026702, 0.024267, 0.022007,
     0.019912, 0.017974, 0.016185, 0.014537, 0.013022, 0.011633, 0.010361, 0.009199, 0.008141, 0.007180, 0.006309,
     0.005521, 0.004811, 0.004172, 0.003600, 0.003089,
     0.002634, 0.002230, 0.001874, 0.001560, 0.001285, 0.001046, 0.000839, 0.000662, 0.000511, 0.000386, 0.000283,
     0.000201, 0.000138, 0.000095, 0.000069, 0.000060])


class RDMProcessor:

    def __init__(self, n_fast_fft, n_slow_fft):
        self.n_fast_fft = n_fast_fft
        self.w_fast_fft = np.interp(np.linspace(0, 1, n_fast_fft),
                                    np.linspace(0, 1, fast_fft_window.shape[0]),
                                    fast_fft_window)

        self.n_slow_fft = n_slow_fft
        self.w_slow_fft = 0.5 - 0.5 * np.cos(2 * np.pi * np.arange(self.n_slow_fft) / (self.n_slow_fft - 1))

    def process_fft(self, data):
        # make complex dims: chirps, antennas, real/imag, sample
        data = data[:, :, 0, :] + 1j * data[:, :, 1, :]

        data = np.transpose(data, [1, 0, 2])

        # demean
        data = data - np.mean(data, axis=2)[:, :, None]

        # pad and window function
        n_pad = (self.n_fast_fft - data.shape[2]) // 2

        data = np.pad(data, pad_width=((0, 0), (0, 0), (n_pad, n_pad)))

        data = data * self.w_fast_fft[None, None, :]

        data = np.fft.fft(data, axis=2)

        # demean
        data = data - np.mean(data, axis=1)[:, None, :]

        # pad and window function
        n_pad = (self.n_slow_fft - data.shape[1]) // 2
        data = np.pad(data, pad_width=((0, 0), (n_pad, n_pad), (0, 0)))

        data = data * self.w_slow_fft[None, :, None]

        data = np.fft.fft(data, axis=1)

        # combine antennas
        data = data[0, :, :] * np.conj(data[1, :, :])

        data = np.fft.fftshift(data, 0)
        data = np.fft.fftshift(data, 1)

        phases = np.angle(data)

        amp = np.log10(np.abs(data))

        return amp, phases
